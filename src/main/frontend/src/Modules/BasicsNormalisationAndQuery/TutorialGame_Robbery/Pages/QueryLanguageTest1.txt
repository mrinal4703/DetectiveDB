// import React, { useState } from "react";
// import axios from "axios";
// import { username } from "../../../../Constants/Texts/constants";
//
// function QueryLanguageTest1() {
//     const [query, setQuery] = useState("");
//     const [result, setResult] = useState(null);
//     const [error, setError] = useState(null);
//     const [guess, setGuess] = useState("");
//     const [culpritFound, setCulpritFound] = useState(false);
//     const [gameOver, setGameOver] = useState(false);
//     const [nestedQuerySuccess, setNestedQuerySuccess] = useState(false);
//     const [evidence, setEvidence] = useState({
//         suspiciousActivity: false,
//         witnessStatement: false,
//         cameraFootage: false,
//     });
//
//     const executeQuery = async () => {
//         if (!query.trim()) {
//             setError("Please enter a valid SQL query.");
//             return;
//         }
//
//         try {
//             const response = await axios.get(`http://${username}/api/sql/execute`, {
//                 params: { query },
//             });
//
//             if (response.data.error) {
//                 setError(response.data.error);
//                 setResult(null);
//             } else if (response.data.message) {
//                 setError(null);
//                 setResult("No data found.");
//             } else {
//                 setError(null);
//                 setResult(response.data.data);
//
//                 // Check if the query result matches specific evidence
//                 if (Array.isArray(response.data.data)) {
//                     const data = response.data.data;
//                     console.log("Query Result:", data); // Debugging
//
//                     // Evidence 1: Suspicious Activity in the Living Room
//                     if (
//                         query.toLowerCase().includes("location = 'living room'") &&
//                         query.toLowerCase().includes("action = 'watching tv'") &&
//                         data.some(
//                             (row) =>
//                                 row.location.toLowerCase().trim() === "living room" &&
//                                 row.action.toLowerCase().trim() === "watching tv"
//                         )
//                     ) {
//                         setEvidence((prev) => ({ ...prev, suspiciousActivity: true }));
//                     }
//
//                     // Evidence 2: Witness Statement About Suspicious Activity
//                     if (
//                         query.toLowerCase().includes("room_type = 'lounge'") &&
//                         query.toLowerCase().includes("statement like '%suspicious%'") &&
//                         data.some(
//                             (row) =>
//                                 row.room_type.toLowerCase().trim() === "lounge" &&
//                                 row.statement.toLowerCase().trim().includes("suspicious")
//                         )
//                     ) {
//                         setEvidence((prev) => ({ ...prev, witnessStatement: true }));
//                     }
//
//                     // Evidence 3: Camera Footage Confirming Suspicious Activity
//                     if (
//                         query.toLowerCase().includes("camera_id = 1") &&
//                         query.toLowerCase().includes("footage = 'footage of suspicious activity'") &&
//                         data.some(
//                             (row) =>
//                                 row.camera_id === "1" && // Compare as a string
//                                 row.footage.toLowerCase().trim() === "footage of suspicious activity"
//                         )
//                     ) {
//                         console.log("Camera Footage Evidence Found:", data); // Debugging
//                         setEvidence((prev) => ({ ...prev, cameraFootage: true }));
//                     } else {
//                         console.log("Camera Footage Evidence Not Found:", data); // Debugging
//                     }
//
//                     // Check if all evidence is collected and the user submits the nested query
//                     if (allEvidenceCollected && query.toLowerCase().includes("select")) {
//                         const culpritName = data[0]?.person_name?.toLowerCase().trim();
//                         if (culpritName === "alice") {
//                             setNestedQuerySuccess(true); // Nested query succeeded
//                             setError(null); // Clear any previous errors
//                         } else {
//                             setError("Incorrect nested query. Try again!");
//                         }
//                     }
//                 }
//             }
//         } catch (err) {
//             setError("Server Error: " + err.message);
//         }
//     };
//
//     const handleGuess = () => {
//         if (guess.trim().toLowerCase() === "alice") {
//             setCulpritFound(true);
//             setGameOver(true);
//         } else {
//             setError("Incorrect guess. The culprit is Alice.");
//             setGameOver(true); // End the game after one incorrect guess
//         }
//     };
//
//     const allEvidenceCollected =
//         evidence.suspiciousActivity && evidence.witnessStatement && evidence.cameraFootage;
//
//     return (
//         <div className="App p-6 bg-gray-50 min-h-screen">
//             <h1 className="text-3xl font-bold text-center mb-6">Detective Game - Find the Robber!</h1>
//             <p className="text-center text-gray-700 mb-8">
//                 A robbery has occurred in the house! Use SQL queries to find clues and identify the robber among the 15 suspects.
//             </p>
//
//             {/* Database Schema */}
//             <div className="my-10 bg-white p-6 rounded-lg shadow-md">
//                 <h2 className="text-xl font-semibold mb-4">Database Schema</h2>
//                 <ul className="list-disc list-inside text-gray-700">
//                     <li><strong>persons</strong> (person_name, location, action)</li>
//                     <li><strong>personrooms</strong> (person_name, room_type, room_contents)</li>
//                     <li><strong>witnessstatements</strong> (room_type, time, statement)</li>
//                     <li><strong>locations</strong> (location, camera_id)</li>
//                     <li><strong>cameras</strong> (camera_id, status, footage)</li>
//                 </ul>
//             </div>
//
//             {/* Evidence Clues */}
//             <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
//                 <h3 className="text-xl font-semibold mb-4">Evidence Clues</h3>
//                 <ul className="space-y-2">
//                     <li>
//                         <strong>Suspicious Activity in Living Room</strong>: Find a person in the <strong>Living Room</strong> who was <strong>watching TV</strong>.
//                     </li>
//                     <li>
//                         <strong>Witness Statement About Suspicious Activity</strong>: Find a witness statement for the <strong>Lounge</strong> that mentions <strong>suspicious activity</strong>.
//                     </li>
//                     <li>
//                         <strong>Camera Footage Confirming Suspicious Activity</strong>: Find camera footage from the <strong>Living Room</strong> (camera_id = 1) that shows <strong>suspicious activity</strong>.
//                     </li>
//                 </ul>
//             </div>
//
//             {/* Query Section */}
//             <div className="mb-8">
//                 <h2 className="text-xl font-semibold mb-4">Find Clues</h2>
//                 <div className="flex gap-4">
//                     <input
//                         type="text"
//                         value={query}
//                         onChange={(e) => setQuery(e.target.value)}
//                         placeholder="Enter your SQL query"
//                         className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
//                     />
//                     <button
//                         onClick={executeQuery}
//                         className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
//                     >
//                         Run Query
//                     </button>
//                 </div>
//             </div>
//
//             {/* Evidence Status */}
//             <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
//                 <h3 className="text-xl font-semibold mb-4">Evidence Collected</h3>
//                 <ul className="space-y-2">
//                     <li>
//                         Suspicious Activity in Living Room:{" "}
//                         {evidence.suspiciousActivity ? "✅" : "❌"}
//                     </li>
//                     <li>
//                         Witness Statement About Suspicious Activity:{" "}
//                         {evidence.witnessStatement ? "✅" : "❌"}
//                     </li>
//                     <li>
//                         Camera Footage Confirming Suspicious Activity:{" "}
//                         {evidence.cameraFootage ? "✅" : "❌"}
//                     </li>
//                 </ul>
//             </div>
//
//             {/* Prompt for Nested Query */}
//             {allEvidenceCollected && !nestedQuerySuccess && (
//                 <div className="mt-8 bg-white p-6 rounded-lg shadow-md">
//                     <h2 className="text-xl font-semibold mb-4">Solve the Mystery</h2>
//                     <p className="mb-4">
//                         You have collected all the evidence! Write a nested SQL query to reveal the culprit's name.
//                     </p>
//                 </div>
//             )}
//
//             {/* Result Display */}
//             {result && Array.isArray(result) ? (
//                 <div className="overflow-x-auto">
//                     <table className="min-w-full bg-white border border-gray-300">
//                         <thead className="bg-gray-100">
//                         <tr>
//                             {Object.keys(result[0]).map((key) => (
//                                 <th key={key} className="px-4 py-2 border border-gray-300">
//                                     {key}
//                                 </th>
//                             ))}
//                         </tr>
//                         </thead>
//                         <tbody>
//                         {result.map((row, index) => (
//                             <tr key={index} className="hover:bg-gray-50">
//                                 {Object.values(row).map((value, i) => (
//                                     <td key={i} className="px-4 py-2 border border-gray-300">
//                                         {value}
//                                     </td>
//                                 ))}
//                             </tr>
//                         ))}
//                         </tbody>
//                     </table>
//                 </div>
//             ) : (
//                 result && <p>{result}</p>
//             )}
//
//             {/* Guess Section */}
//             {nestedQuerySuccess && !culpritFound && !gameOver && (
//                 <div className="mt-8 bg-white p-6 rounded-lg shadow-md">
//                     <h2 className="text-xl font-semibold mb-4">Guess the Culprit</h2>
//                     <p className="mb-4">You have 1 attempt left.</p>
//                     <div className="flex gap-4">
//                         <input
//                             type="text"
//                             value={guess}
//                             onChange={(e) => setGuess(e.target.value)}
//                             placeholder="Enter the culprit's name"
//                             className="flex-1 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
//                         />
//                         <button
//                             onClick={handleGuess}
//                             className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition-colors"
//                         >
//                             Submit Guess
//                         </button>
//                     </div>
//                 </div>
//             )}
//
//             {/* Game Over Messages */}
//             {culpritFound && (
//                 <div className="mt-8 bg-green-100 p-6 rounded-lg shadow-md">
//                     <h2 className="text-2xl font-bold text-green-700 mb-4">Case Solved!</h2>
//                     <p className="text-green-700">You have identified <strong>Alice</strong> as the culprit.</p>
//                 </div>
//             )}
//
//             {gameOver && !culpritFound && (
//                 <div className="mt-8 bg-red-100 p-6 rounded-lg shadow-md">
//                     <h2 className="text-2xl font-bold text-red-700 mb-4">Game Over!</h2>
//                     <p className="text-red-700">You have exhausted all attempts. The culprit was <strong>Alice</strong>.</p>
//                 </div>
//             )}
//         </div>
//     );
// }
//
// export default QueryLanguageTest1;

import React, { useState } from "react";
import axios from "axios";
import { username } from "../../../../Constants/Texts/constants";

function QueryLanguageTest1() {
    const [query, setQuery] = useState("");
    const [result, setResult] = useState(null);
    const [error, setError] = useState(null);
    const [guess, setGuess] = useState("");
    const [attemptsLeft, setAttemptsLeft] = useState(3);
    const [culpritFound, setCulpritFound] = useState(false);
    const [gameOver, setGameOver] = useState(false);
    const [nestedQuerySuccess, setNestedQuerySuccess] = useState(false);
    const [evidence, setEvidence] = useState({
        suspiciousActivity: false,
        witnessStatement: false,
        cameraFootage: false,
    });

    const allEvidenceCollected =
        evidence.suspiciousActivity && evidence.witnessStatement && evidence.cameraFootage;

    const executeQuery = async () => {
        if (!query.trim()) {
            setError("Please enter a valid SQL query.");
            return;
        }

        try {
            const response = await axios.get(`http://${username}/api/sql/execute`, {
                params: { query },
            });

            if (response.data.error) {
                setError(response.data.error);
                setResult(null);
            } else if (response.data.message) {
                setError(null);
                setResult("No data found.");
            } else {
                setError(null);
                setResult(response.data.data);

                if (Array.isArray(response.data.data)) {
                    const data = response.data.data;

                    // Fix evidence tracking logic
                    if (
                        query.toLowerCase().includes("location = 'living room'") &&
                        query.toLowerCase().includes("action = 'watching tv'") &&
                        data.some(
                            (row) =>
                                row.location?.toLowerCase().trim() === "living room" &&
                                row.action?.toLowerCase().trim() === "watching tv"
                        )
                    ) {
                        setEvidence((prev) => ({ ...prev, suspiciousActivity: true }));
                    }

                    if (
                        query.toLowerCase().includes("room_type = 'lounge'") &&
                        query.toLowerCase().includes("statement like '%suspicious%'") &&
                        data.some(
                            (row) =>
                                row.room_type?.toLowerCase().trim() === "lounge" &&
                                row.statement?.toLowerCase().trim().includes("suspicious")
                        )
                    ) {
                        setEvidence((prev) => ({ ...prev, witnessStatement: true }));
                    }

                    if (
                        query.toLowerCase().includes("camera_id = 1") &&
                        query.toLowerCase().includes("footage = 'footage of suspicious activity'") &&
                        data.some(
                            (row) =>
                                row.camera_id === "1" &&
                                row.footage?.toLowerCase().trim() === "footage of suspicious activity"
                        )
                    ) {
                        setEvidence((prev) => ({ ...prev, cameraFootage: true }));
                    }

                    // Ensure culprit logic works
                    if (allEvidenceCollected && query.toLowerCase().includes("select")) {
                        const culpritName = data.find(
                            (row) => row.person_name?.toLowerCase().trim() === "alice"
                        );

                        if (culpritName) {
                            setNestedQuerySuccess(true);
                        } else {
                            setError("Incorrect nested query or incomplete evidence. Try again cautiously!");
                        }
                    }
                }
            }
        } catch (err) {
            setError("Server Error: " + err.message);
        }
    };

    const handleGuess = () => {
        if (guess.trim().toLowerCase() === "alice") {
            setCulpritFound(true);
            setGameOver(true);
        } else {
            setAttemptsLeft((prev) => prev - 1);
            if (attemptsLeft <= 1) {
                setGameOver(true);
            }
            setError(
                `Incorrect guess. ${attemptsLeft - 1} attempts left. Re-examine the evidence and refine your nested query.`
            );
        }
    };

    return (
        <div className="App p-6 bg-gray-50 min-h-screen">
            <h1 className="text-3xl font-bold text-center mb-6">Detective Game - Find the Robber!</h1>
            <p className="text-center text-gray-700 mb-8">
                A robbery has occurred in the house! Use SQL queries to find clues and identify the robber among the 15 suspects.
            </p>

            {/* Database Schema */}
            <div className="my-10 bg-white p-6 rounded-lg shadow-md">
                <h2 className="text-xl font-semibold mb-4">Database Schema</h2>
                <ul className="list-disc list-inside text-gray-700">
                    <li><strong>persons</strong> (person_name, location, action)</li>
                    <li><strong>personrooms</strong> (person_name, room_type, room_contents)</li>
                    <li><strong>witnessstatements</strong> (room_type, time, statement)</li>
                    <li><strong>locations</strong> (location, camera_id)</li>
                    <li><strong>cameras</strong> (camera_id, status, footage)</li>
                </ul>
            </div>

            {/* Evidence Clues */}
            <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-xl font-semibold mb-4">Evidence Clues</h3>
                <ul className="space-y-2">
                    <li>
                        <strong>Suspicious Activity in Living Room</strong>: Find a person in the <strong>Living Room</strong> who was <strong>watching TV</strong>.
                    </li>
                    <li>
                        <strong>Witness Statement About Suspicious Activity</strong>: Find a witness statement for the <strong>Lounge</strong> that mentions <strong>suspicious activity</strong>.
                    </li>
                    <li>
                        <strong>Camera Footage Confirming Suspicious Activity</strong>: Find camera footage from the <strong>Living Room</strong> (camera_id = 1) that shows <strong>suspicious activity</strong>.
                    </li>
                </ul>
            </div>

            {/* Query Section */}
            <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Find Clues</h2>
                <div className="flex gap-4">
                    <input
                        type="text"
                        value={query}
                        onChange={(e) => setQuery(e.target.value)}
                        placeholder="Enter your SQL query"
                        className="flex-1 p-2 border border-gray-300 rounded-lg"
                    />
                    <button
                        onClick={executeQuery}
                        className="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600"
                    >
                        Run Query
                    </button>
                </div>
            </div>

            {/* Prompt for Nested Query */}
            {allEvidenceCollected && !nestedQuerySuccess && (
                <div className="mt-8 bg-white p-6 rounded-lg shadow-md">
                    <h2 className="text-xl font-semibold mb-4">Solve the Mystery</h2>
                    <p className="mb-4">
                        You have collected all the evidence! Write a nested SQL query to reveal the culprit's name.
                    </p>
                </div>
            )}

            {/* Evidence Status */}
            <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
                <h3 className="text-xl font-semibold mb-4">Evidence Collected</h3>
                <ul className="space-y-2">
                    <li>
                        Suspicious Activity in Living Room:{" "}
                        {evidence.suspiciousActivity ? "✅" : "❌"}
                    </li>
                    <li>
                        Witness Statement About Suspicious Activity:{" "}
                        {evidence.witnessStatement ? "✅" : "❌"}
                    </li>
                    <li>
                        Camera Footage Confirming Suspicious Activity:{" "}
                        {evidence.cameraFootage ? "✅" : "❌"}
                    </li>
                </ul>
            </div>

            {/* Result Display */}
            {result && Array.isArray(result) ? (
                <div className="overflow-x-auto">
                    <table className="min-w-full bg-white border border-gray-300">
                        <thead className="bg-gray-100">
                        <tr>
                            {Object.keys(result[0]).map((key) => (
                                <th key={key} className="px-4 py-2 border border-gray-300">
                                    {key}
                                </th>
                            ))}
                        </tr>
                        </thead>
                        <tbody>
                        {result.map((row, index) => (
                            <tr key={index} className="hover:bg-gray-50">
                                {Object.values(row).map((value, i) => (
                                    <td key={i} className="px-4 py-2 border border-gray-300">
                                        {value}
                                    </td>
                                ))}
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            ) : (
                result && <p>{result}</p>
            )}

            {/* Guess Section */}
            {nestedQuerySuccess && !culpritFound && !gameOver && (
                <div className="mt-8">
                    <h2 className="text-xl font-semibold mb-4">Guess the Culprit</h2>
                    <input
                        type="text"
                        value={guess}
                        onChange={(e) => setGuess(e.target.value)}
                        placeholder="Enter the culprit's name"
                        className="p-2 border border-gray-300 rounded-lg"
                    />
                    <button onClick={handleGuess} className="bg-green-500 text-white px-6 py-2 rounded-lg">
                        Submit Guess
                    </button>
                </div>
            )}

            {error && (
                <div className="mt-4 bg-red-100 p-4 rounded-lg shadow-md">
                    <p className="text-red-700">{error}</p>
                </div>
            )}

            {/* Game Over Messages */}
            {culpritFound && (
                <div className="mt-8 bg-green-100 p-6 rounded-lg shadow-md">
                    <h2 className="text-2xl font-bold text-green-700 mb-4">Case Solved!</h2>
                    <p className="text-green-700">You have identified <strong>Alice</strong> as the culprit.</p>
                </div>
            )}

            {gameOver && !culpritFound && (
                <div className="mt-8 bg-red-100 p-6 rounded-lg shadow-md">
                    <h2 className="text-2xl font-bold text-red-700 mb-4">Game Over!</h2>
                    <p className="text-red-700">You have exhausted all attempts. The culprit was <strong>Alice</strong>.</p>
                </div>
            )}
        </div>
    );
}

export default QueryLanguageTest1;









import React, {useEffect, useState} from 'react';
import {AppText, SQLTest1} from "../../../../Constants/Texts";
import {helperright} from "../../../../Resources/Images/People";
import {clicksound} from "../../../../Resources/Sounds";
import {motion} from "framer-motion";
import {Link} from "react-router-dom";
import {sqlpracticepic, sqltest1pic} from "../../../../Resources/Images/Others";
import {username} from "../../../../Constants/Texts/constants";
import {CheckCircle, XCircle} from "lucide-react";
import axios from "axios";

const HelperAtFirst = ({show, onClose, value}) => {
    const [displayText, setDisplayText] = useState("");
    const [showButton, setShowButton] = useState(false);
    const [voices, setVoices] = useState([]);
    const [voicesLoaded, setVoicesLoaded] = useState(false);

    const texts = value;
    const voiceMain = "Microsoft Mark";
    const position = "left";
    const img = helperright;

    const playClickSound = () => {
        const audio = new Audio(clicksound);
        audio.play();
    };

    const handleClick = () => {
        playClickSound();
        onClose();
    };

    useEffect(() => {
        const loadVoices = () => {
            const availableVoices = window.speechSynthesis.getVoices();
            if (availableVoices.length > 0) {
                setVoices(availableVoices);
                setVoicesLoaded(true);
            } else {
                setTimeout(loadVoices, 100); // Retry after a short delay
            }
        };

        window.speechSynthesis.onvoiceschanged = loadVoices;
        loadVoices();

        return () => {
            window.speechSynthesis.onvoiceschanged = null;
        };
    }, []);

    // Speak the text and update display text word by word
    useEffect(() => {
        if (!show || !texts || !voicesLoaded) return;

        // Cancel any ongoing speech synthesis
        window.speechSynthesis.cancel();

        const utterance = new SpeechSynthesisUtterance(texts);
        let selectedVoice = voices.find((voice) => voice.name.includes(voiceMain)) || voices[0];

        if (!selectedVoice) {
            console.warn("Desired voice not found. Using default voice.");
            selectedVoice = voices[0]; // Fallback to the first available voice
        }

        utterance.voice = selectedVoice;

        // Reset the display text before starting speech
        setDisplayText("");

        const words = texts.split(" ");
        let wordIndex = -1;

        utterance.onboundary = (event) => {
            if (event.name === "word" && wordIndex < words.length - 1) {
                wordIndex++;
                setDisplayText((prev) => (prev ? `${prev} ${words[wordIndex]}` : words[wordIndex]));
            }
        };

        utterance.onend = () => {
            setShowButton(true); // Show the button when speech ends
        };

        // Speak the utterance
        window.speechSynthesis.speak(utterance);

        return () => {
            // Cancel the speech synthesis if the component unmounts
            window.speechSynthesis.cancel();
        };
    }, [show, voicesLoaded, voices]);

    return (
        show && (
            <motion.div
                className="fixed inset-0 z-50 bg-black/50 flex justify-center items-center"
                initial={{opacity: 0}}
                animate={{opacity: 1}}
                transition={{duration: 0.3, ease: "easeOut"}}
            >
                <div className={`absolute bottom-0 ${position}-0`}>
                    <motion.img
                        src={img}
                        className="h-80 w-80 object-contain rounded-xl"
                        alt="Assistant"
                        initial={{scale: 0}}
                        animate={{scale: 1}}
                        transition={{duration: 0.3, ease: "easeOut"}}
                    />
                </div>

                <div
                    className={`absolute bottom-28 ${position}-28 text-lg text-black p-3 mx-20 bg-white my-6 rounded-2xl shadow-inner border-2 border-black w-auto`}>
                    <div>
                        {displayText}
                    </div>
                    <button
                        className={`mt-4 px-3 py-1 bg-[#495f67] text-white font-semibold rounded-lg shadow-md hover:bg-[#2e3c49] transition ease-in ${showButton ? "block" : "hidden"}`}
                        onClick={handleClick}
                    >
                        Okay
                    </button>
                </div>
            </motion.div>
        )
    );
};

const QueryLanguageTest1 = () => {
    const [showDiv1, setShowDiv1] = useState(true);
    const [showSqltest1, setShowSqltest1] = useState(false);
    const [showSqltest2, setShowSqltest2] = useState(false);

    const [answers, setAnswers] = useState({});
    const [results, setResults] = useState({});
    const [error, setError] = useState({});

    const handleInputChange = (id, value) => {
        setAnswers((prev) => ({ ...prev, [id]: value }));
    };

    const validateQuery = (id, validation) => {
        const userQuery = answers[id]?.toLowerCase() || '';
        const isValid = validation.every((term) => userQuery.includes(term));
        setResults((prev) => ({ ...prev, [id]: isValid ? 'Correct!' : 'Incorrect' }));
    };

    const executeQuery = async (id, query) => {
        try {
            const response = await axios.get(`http://${username}/api/sql/execute`, {
                params: { query },
            });
            if (response.data.error) {
                setError((prev) => ({ ...prev, [id]: response.data.error }));
                setResults((prev) => ({ ...prev, [id]: null }));
            } else {
                setError((prev) => ({ ...prev, [id]: null }));
                setResults((prev) => ({ ...prev, [id]: response.data.data || response.data.message }));
            }
        } catch (err) {
            setError((prev) => ({ ...prev, [id]: 'Server Error: ' + err.message }));
        }
    };

    // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
    // const [query, setQuery] = useState('');
    // const [feedback, setFeedback] = useState('');
    // const [result, setResult] = useState(null);
    // const [error, setError] = useState(null);
    //
    // const currentQuestion = SQLTest1.Questions[currentQuestionIndex];
    //
    // const validateQuery = () => {
    //     const lowerQuery = query.toLowerCase();
    //     const missingKeywords = currentQuestion.validation.filter(keyword => !lowerQuery.includes(keyword));
    //
    //     if (missingKeywords.length > 0) {
    //         setFeedback(`Missing keywords: ${missingKeywords.join(', ')}`);
    //     } else {
    //         setFeedback('Query looks good! Ready to run.');
    //     }
    // };
    //
    // const executeQuery = async () => {
    //     try {
    //         const response = await axios.get(`http://${username}/api/sql/execute`, {
    //             params: { query },
    //         });
    //
    //         if (response.data.error) {
    //             setError(response.data.error);
    //             setResult(null);
    //         } else if (response.data.message) {
    //             setError(null);
    //             setResult(response.data.message);
    //         } else {
    //             setError(null);
    //             setResult(response.data.data);
    //         }
    //     } catch (err) {
    //         setError("Server Error: " + err.message);
    //     }
    // };
    //
    // const nextQuestion = () => {
    //     setQuery('');
    //     setFeedback('');
    //     setError(null);
    //     setResult(null);
    //     setCurrentQuestionIndex((prev) => (prev + 1) % SQLTest1.Questions.length);
    // };

    const playClickSound = () => {
        const audio = new Audio(clicksound);
        audio.play();
    };

    const handleClickDiv1 = () => {
        playClickSound();
        setShowDiv1(false);
        setTimeout(() => setShowSqltest1(true), 1500);
    };

    const handleClose1 = () => {
        setShowSqltest1(false);
        setShowSqltest2(true);
    };

    const handleClose2 = () => {
        setShowSqltest2(false);
    };

    return (
        <div>
            {showDiv1 ? (
                <>
                    <div className={'w-screen h-screen bg-[#343237] grid grid-cols-3'}>
                        <div className={'flex p-2 py-64 items-end justify-center align-middle '}>
                            <Link to={'/TutorialNFPractice'}>
                                <button
                                    onClick={() => {
                                        playClickSound();
                                    }}
                                    className="z-50 px-5 py-3 bg-[#495f67] text-white font-semibold rounded-lg shadow-md hover:bg-[#2e3c49] transition ease-in"
                                >
                                    Replay Query Language Basics
                                </button>
                            </Link>
                        </div>
                        <div className={'flex my-auto items-end justify-center align-middle'}>
                            <img
                                src={sqltest1pic}
                                alt="Detective"
                                className="flex h-[600px] w-[600px]  my-auto rounded-3xl shadow-2xl"
                            />
                            <h1 className={'absolute opacity-90 top-8 w-[426.5px] h-[80px] text-4xl text-center items-center align-middle justify-center flex bg-white text-[#343237]'}>Introduction
                                to Query Language in DBMS</h1>
                        </div>
                        <div className={'flex p-2 py-64 items-end justify-center align-middle '}>
                            <button
                                onClick={handleClickDiv1}
                                className="z-50 px-5 py-3 bg-[#495f67] text-white font-semibold rounded-lg shadow-md hover:bg-[#2e3c49] transition ease-in"
                            >
                                Continue to the Next Part
                            </button>
                        </div>
                    </div>
                </>
            ) : (
                <div>
                    <div className="min-h-screen bg-gray-100 p-6">
                        <h1 className="text-3xl font-bold text-center mb-6">SQL Practice Test</h1>
                        <div className="space-y-6">
                            {SQLTest1.Questions.map((q) => (
                                <div key={q.id} className="bg-white p-6 rounded-lg shadow-md">
                                    <h2 className="text-xl font-semibold">{q.concept} Question</h2>
                                    <p className="text-gray-700 mb-4">{q.question}</p>
                                    <textarea
                                        className="w-full p-2 border rounded-lg focus:outline-none focus:ring focus:border-blue-300"
                                        placeholder="Write your SQL query here..."
                                        rows="3"
                                        value={answers[q.id] || ''}
                                        onChange={(e) => handleInputChange(q.id, e.target.value)}
                                    />
                                    <div className="flex space-x-4 mt-4">
                                        <button
                                            className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
                                            onClick={() => validateQuery(q.id, q.validation)}
                                        >
                                            Validate Query
                                        </button>
                                        <button
                                            className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600"
                                            onClick={() => executeQuery(q.id, answers[q.id])}
                                        >
                                            Run Query
                                        </button>
                                    </div>
                                    {results[q.id] && Array.isArray(results[q.id]) ? (
                                        <table className="mt-4 w-full border-collapse border border-gray-300">
                                            <thead>
                                            <tr>
                                                {Object.keys(results[q.id][0]).map((key) => (
                                                    <th key={key} className="border border-gray-300 px-4 py-2">
                                                        {key}
                                                    </th>
                                                ))}
                                            </tr>
                                            </thead>
                                            <tbody>
                                            {results[q.id].map((row, index) => (
                                                <tr key={index}>
                                                    {Object.values(row).map((value, i) => (
                                                        <td
                                                            key={i}
                                                            className={`border border-gray-300 px-4 py-2 ${
                                                                value === 'Correct!' ? 'text-green-500' :
                                                                    value === 'Incorrect' ? 'text-red-500' :
                                                                        'text-black'
                                                            }`}
                                                        >
                                                            {value}
                                                        </td>
                                                    ))}
                                                </tr>
                                            ))}
                                            </tbody>
                                        </table>
                                    ) : (
                                        results[q.id] && (
                                            <p className={`mt-4 text-lg ${
                                                results[q.id] === 'Correct!' ? 'text-green-500' :
                                                    results[q.id] === 'Incorrect' ? 'text-red-500' :
                                                        'text-black'
                                            }`}>
                                                {results[q.id]}
                                            </p>
                                        )
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>
                    {/*<div className="min-h-screen p-10 bg-gray-100">*/}
                    {/*    <div className="max-w-4xl mx-auto p-6 bg-white rounded-xl shadow-lg">*/}
                    {/*        <h1 className="text-2xl font-bold mb-4">SQL Practice Test</h1>*/}
                    {/*        <h2 className="text-xl font-semibold mb-2">{currentQuestion.concept} Question</h2>*/}
                    {/*        <p className="mb-4">{currentQuestion.question}</p>*/}
                    {/*        <textarea*/}
                    {/*            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"*/}
                    {/*            rows="4"*/}
                    {/*            value={query}*/}
                    {/*            onChange={(e) => setQuery(e.target.value)}*/}
                    {/*            placeholder="Write your SQL query here..."*/}
                    {/*        ></textarea>*/}
                    {/*        <div className="flex gap-4 mt-4">*/}
                    {/*            <button*/}
                    {/*                className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"*/}
                    {/*                onClick={validateQuery}*/}
                    {/*            >*/}
                    {/*                Validate Query*/}
                    {/*            </button>*/}
                    {/*            <button*/}
                    {/*                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"*/}
                    {/*                onClick={executeQuery}*/}
                    {/*            >*/}
                    {/*                Run Query*/}
                    {/*            </button>*/}
                    {/*            <button*/}
                    {/*                className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600"*/}
                    {/*                onClick={nextQuestion}*/}
                    {/*            >*/}
                    {/*                Next Question*/}
                    {/*            </button>*/}
                    {/*        </div>*/}
                    {/*        {feedback && <p className="mt-4 text-blue-600">{feedback}</p>}*/}
                    {/*        {error && <p className="mt-4 text-red-600">{error}</p>}*/}
                    {/*        {result && (*/}
                    {/*            <div className="mt-6">*/}
                    {/*                <h3 className="text-lg font-bold mb-2">Result:</h3>*/}
                    {/*                {Array.isArray(result) ? (*/}
                    {/*                    <table className="w-full table-auto border-collapse border border-gray-300">*/}
                    {/*                        <thead>*/}
                    {/*                        <tr>*/}
                    {/*                            {Object.keys(result[0]).map((key) => (*/}
                    {/*                                <th key={key} className="border p-2">{key}</th>*/}
                    {/*                            ))}*/}
                    {/*                        </tr>*/}
                    {/*                        </thead>*/}
                    {/*                        <tbody>*/}
                    {/*                        {result.map((row, index) => (*/}
                    {/*                            <tr key={index}>*/}
                    {/*                                {Object.values(row).map((value, i) => (*/}
                    {/*                                    <td key={i} className="border p-2">{value}</td>*/}
                    {/*                                ))}*/}
                    {/*                            </tr>*/}
                    {/*                        ))}*/}
                    {/*                        </tbody>*/}
                    {/*                    </table>*/}
                    {/*                ) : (*/}
                    {/*                    <p>{result}</p>*/}
                    {/*                )}*/}
                    {/*            </div>*/}
                    {/*        )}*/}
                    {/*    </div>*/}
                    {/*</div>*/}
                </div>
            )}
            <HelperAtFirst show={showSqltest1} onClose={handleClose1} value={AppText.SQL1Help1}/>
            <HelperAtFirst show={showSqltest2} onClose={handleClose2} value={AppText.SQL1Help2}/>
        </div>
    );
};

export default QueryLanguageTest1;
